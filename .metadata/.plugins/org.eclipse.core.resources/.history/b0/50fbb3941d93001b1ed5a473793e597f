#include "stm32l1xx.h"
#include "stm32l_discovery_lcd.h"
#include "stm32l1xx_gpio.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nmea.h"
#include <math.h>

char gps_message[GPS_BUFFER_SIZE] = ""; //GPS receive message
int grmi = 0; //GPS receive message increment
char buff[8200] = "";
int count = 0;
nmea_message parsed_message;

void reverse(char* str, int len){
    int i = 0, j = len - 1, temp;
    while (i < j) {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++;
        j--;
    }
}

int intToStr(int x, char str[], int d){
    int i = 0;
    while (x) {
        str[i++] = (x % 10) + '0';
        x = x / 10;
    }
    while (i < d)
        str[i++] = '0';

    reverse(str, i);
    str[i] = '\0';
    return i;
}

// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint){
    int ipart = (int)n;
    float fpart = n - (float)ipart;
    int i = intToStr(ipart, res, 0);
    if (afterpoint != 0) {
        res[i] = '.';
        fpart = fpart * pow(10, afterpoint);

        intToStr((int)fpart, res + i + 1, afterpoint);
    }
}

void convertLat(char * lat){
    int tot = 0;
    double remainder = 0;
    double res = 0;
    double buff = atof(lat);
    buff /= 100;
    tot = (int)buff;
    remainder = ((buff - tot) * 100) / 60;
    res = tot + remainder;
    memset(lat, '\0', 25*sizeof(char));
    ftoa(res, lat, 6);
    return;
}

void convertLong(char * longitude){
    int tot = 0;
    double remainder = 0;
    double res = 0;
    double buff = atof(longitude);
    buff /= 100;
    tot = (int)buff;
    remainder = ((buff - tot) * 100) / 60;
    res = tot + remainder;
    memset(longitude, '\0', 25*sizeof(char));
    ftoa(res, longitude, 6);
    return;
}
//Parse an nmea gsv message
void parse_gsv(gsv_message gsv, char * buffer){
	char * curr = strstr(buffer, ",");
	curr++;
	curr = strstr(curr, ",");
	curr++;
	curr = strstr(curr, ",");
	curr++;
	gsv.num_satellites = atoi(curr);
}

//Parse an nmea rmc message
void parse_rmc(rmc_message * rmc, char * buffer){
    //Get time
	char * curr = strstr(buffer, ",");
	curr++;
	strncpy(rmc->time, curr, 2);
	curr++;
	curr++;
	rmc->time[2] = ':';
	strncpy(&(rmc->time[3]), curr, 2);
	curr++;
	curr++;
	rmc->time[5] = ':';
	strncpy(&(rmc->time[6]), curr, 2);

    //Get valid character
	curr = strstr(curr, ",");
	curr++;
	rmc -> valid = *curr;

    //Get latitude
	curr = strstr(curr, ",");
	curr++;
	copyUntil(rmc -> latitude, curr, ',');
	convertLat(rmc -> latitude);
	curr = strstr(curr, ",");

	//Get latitude direction
	curr++;
	rmc -> lat_direction = *curr;
	curr = strstr(curr, ",");

	//Get longitude
	curr++;
	copyUntil(rmc -> longitude, curr, ',');
	convertLong(rmc -> longitude);

	//Get longitude direction
	curr = strstr(curr, ",");
	curr++;
	rmc -> long_direction = *curr;
}

void copyUntil(char * dest, char * source, char c){
	while(*source != c){
		*dest = *source;
		dest++;
		source++;
	}
	dest++;
	*dest = '\0';
}

//Obtains the type of nmea message
nmea_type get_message_type(char * buffer){
	if(strstr(buffer, "GSV") != NULL){
		return GSV;
	}
	else if(strstr(buffer, "RMC") != NULL){
		return RMC;
	}

	return NONE;
}

//Obtains the type of nmea message then parses it
//and returns the message
void parse_sentence(nmea_message message, char * buffer){
	nmea_type type = get_message_type(buffer);

	switch(type){
		case GSV:
			parse_gsv(message.gsv, buffer);
			break;
		case RMC:
			parse_rmc(message.rmc, buffer);
			break;
		case NONE:
			break;
	}

	memset(buffer, '\0', 82*sizeof(char));
}

void free_nmea_message(nmea_message message){
	if(message.gsv != NULL){
		free(message.gsv);
	}else if(message.rmc != NULL){
		free(message.rmc);
	}

	free(message);
}

void psm_in(){
	uint8_t msg[] = "\xB5\x62\x06\x86\x08\x00\x00\x03\x00\x00\x00\x00\x00\x00\x97\x6F";
	uint8_t save_config[] = "\xB5\x62\x06\x09\x0D\x00\x00\x00\x00\x00\xFF\xFF\x00\x00\x00\x00\x00\x00\x07\x21\xAF";
	int size = sizeof(msg);

	for(int i = 0; i < size-1; i++){
		USART_SendData(USART2, msg[i]);
		while(USART_GetFlagStatus(USART2,USART_FLAG_TXE) == RESET);
	}

	size = sizeof(save_config);
	for(int i = 0; i < size-1; i++){
		USART_SendData(USART2, save_config[i]);
		while(USART_GetFlagStatus(USART2,USART_FLAG_TXE) == RESET);
	}
}

void psm_out(){
	uint8_t msg[] = "\xB5\x62\x06\x86\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x95\x61";
	uint8_t save_config[] = "\xB5\x62\x06\x09\x0D\x00\x00\x00\x00\x00\xFF\xFF\x00\x00\x00\x00\x00\x00\x07\x21\xAF";
	int size = sizeof(msg);

	for(int i = 0; i < size-1; i++){
		USART_SendData(USART2, msg[i]);
		while(USART_GetFlagStatus(USART2,USART_FLAG_TXE) == RESET);
	}

	size = sizeof(save_config);
	for(int i = 0; i < size-1; i++){
		USART_SendData(USART2, save_config[i]);
		while(USART_GetFlagStatus(USART2,USART_FLAG_TXE) == RESET);
	}
}

void mon_ver() {
	int i = 0;
	uint8_t msg[] =
			"\xB5\x62\x0A\x04\x00\x00\x0E\x34";
	int size = sizeof(msg);

	for (int i = 0; i < size - 1; i++) {
		USART_SendData(USART2, msg[i]);
		while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
			;
	}

	while (i < 8200) {
		while (USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == RESET);
		buff[i] = USART_ReceiveData(USART2);
		i++;
	}

}

void initUART2(){
	GPIO_InitTypeDef  GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE); //Enabling GPIOA ports
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2 ,ENABLE); //Enabling USART1

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);

	//USART settings
	USART_InitStructure.USART_BaudRate = 9600;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

	USART_Init(USART2, &USART_InitStructure);     //Initialize UART settings

	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt

	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;		 // we want to configure the USART1 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;// this sets the priority group of the USART1 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		 // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);

	USART_Cmd(USART2, ENABLE);    //Enable UART
}

void initTimer(){
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 ,ENABLE);
	TIM_SetAutoreload(TIM2, 10000-1);
	TIM_PrescalerConfig(TIM2, 48000-1, TIM_PSCReloadMode_Update);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
	TIM_Cmd(TIM2, ENABLE);

	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;		 // we want to configure the TIM2 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;// this sets the priority group of the USART1 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		 // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);
	NVIC_SetPriority(TIM2_IRQn, 1);
}

void TIM2_IRQHandler(){
	TIM_ClearFlag(TIM2, TIM_FLAG_Update);
	if(count < 30){
		count++;
	}
	else{
		//some function

		count = 0;
	}
}

void USART2_IRQHandler(){
	  if(USART_GetITStatus(USART2, USART_IT_RXNE)){
		char c = '\0';
		while(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == RESET);
		gps_message[grmi] = USART_ReceiveData(USART2);
		c = gps_message[grmi];
		if(c == '\n'){
			grmi = 0;
			parse_sentence(parsed_message, gps_message);
		}else{
			grmi++;
		}
	  }

	  // check if the USART1 transmit interrupt flag was set
	  if( USART_GetITStatus(USART1, USART_IT_TXE) ){}

	  return;
}

