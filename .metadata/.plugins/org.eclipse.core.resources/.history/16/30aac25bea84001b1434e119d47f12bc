#include "stm32l1xx.h"
#include "stm32l_discovery_lcd.h"
#include "stm32l1xx_gpio.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nmea.h"

void parse_gll(gll_message * gll, char * buffer){
	char * curr = strstr(buffer, ",");
	curr++;
	strncpy(gll -> latitude, curr, 7);
	curr = strstr(curr, ",");
	curr++;
	gll -> lat_direction = *curr;
	curr = strstr(curr, ",");
	curr++;
	strncpy(gll -> longitude, curr, 8);
	curr = strstr(curr, ",");
	curr++;
	gll -> long_direction = *curr;
}

void print_gll(gll_message * gll){
    //printf("%s, %c, %s, %c", gll -> latitude, gll -> lat_direction, gll -> longitude, gll -> long_direction);
}

//Parse an nmea gsv message
void parse_gsv(gsv_message * gsv, char * buffer){
	char * curr = strstr(buffer, ",");
	curr++;
	curr = strstr(curr, ",");
	curr++;
	curr = strstr(curr, ",");
	curr++;
	gsv -> num_satellites = atoi(curr);
}

void print_gsv(gsv_message * gsv){
    printf("%d", gsv -> num_satellites);
}

//Parse an nmea rmc message
void parse_rmc(rmc_message * rmc, char * buffer){
	char * curr = strstr(buffer, ",");
	curr++;
	strncpy(rmc->time, curr, 6);

	curr = strstr(curr, ",");
	curr++;
	rmc -> valid = *curr;

	curr = strstr(curr, ",");
	curr++;
	copyUntil(rmc -> latitude, curr, ',');
	curr = strstr(curr, ",");
	curr++;
	rmc -> lat_direction = *curr;
	curr = strstr(curr, ",");
	curr++;
	copyUntil(rmc -> longitude, curr, ',');
	curr = strstr(curr, ",");
	curr++;
	rmc -> long_direction = *curr;
}

void copyUntil(char * dest, char * source, char c){
	while(*source != c){
		*dest = *source;
		dest++;
		source++;
	}
	dest++;
	*dest = '\0';
}

void print_rmc(rmc_message * rmc){
	//printf("%s:%s:%s  %c", rmc -> hour, rmc -> minutes, rmc -> seconds, rmc -> valid);
}

//Obtains the type of nmea message
nmea_type get_message_type(char * buffer){
	if(strstr(buffer, "GLL") != NULL){
		return GLL;
	}
	else if(strstr(buffer, "GSV") != NULL){
		return GSV;
	}
	else if(strstr(buffer, "RMC") != NULL){
		return RMC;
	}

	return NONE;
}

//Obtains the type of nmea message then parses it
//and returns the message
nmea_message * parse_sentence(nmea_message * message, char * buffer){
	nmea_type type = get_message_type(buffer);
	message->type = type;

	switch(type){
		case GLL:
			parse_gll(message -> gll, buffer);
			break;
		case GSV:
			parse_gsv(message -> gsv, buffer);
			break;
		case RMC:
			parse_rmc(message -> rmc, buffer);
			break;
		case NONE:
			break;
	}

	return message;
}

void free_nmea_message(nmea_message * message){
	if(message -> gll != NULL){
		free(message -> gll);
	}else if(message -> gsv != NULL){
		free(message -> gsv);
	}else if(message -> rmc != NULL){
		free(message -> rmc);
	}

	free(message);
}

void print_nmea_message(nmea_message * message){
	if(message -> type == GLL){
		print_gll(message -> gll);
	}else if(message -> type == GSV){
		print_gsv(message -> gsv);
	}else if(message -> type == RMC){
		print_rmc(message -> rmc);
	}

}

void psm_1hz(){
	char receive_message[GPS_BUFFER_SIZE] = "";
	uint8_t CK_A = 0, CK_B = 0;
	char c = '\0';
	int p = 0;
	int size = 0;
	char ack[] = {0xB5, 0x62, 0x05, 0x01, 0x06, 0x00, 0x00};
	char mon_ver[] = {0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00};
	uint8_t psm[] = {0xB5, 0x62, 0x06, 0x86, 0x08, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	            0x97, 0x6F};

	size = sizeof(mon_ver);
	for(uint8_t i = 2; i < (size - 2) ; i++){
		CK_A = CK_A + mon_ver[i];
		CK_B = CK_B + CK_A;
	  }
	mon_ver[6] = CK_A & 0xFF;
	mon_ver[7] = CK_B & 0xFF;

	while(1){
		 p = 0;
		 c = '\0';
		while(c != '\n'){
			while(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == RESET);
			receive_message[p] = USART_ReceiveData(USART2);
			c = receive_message[p];
			p++;
		}
		if(strstr(receive_message, ack) != NULL){
			break;
		}
		else{
			memset(receive_message, '\0', 82*sizeof(char));
//			for(int i = 0; i < 6; i++){
//				USART_SendData(USART2, 'B');
//			}

			for(int i = 0; i < size; i++){
				USART_SendData(USART2, mon_ver[i]);
			}
		}
	}

	for(uint8_t i = 2; i < 14 ; i++ ){
		CK_A = CK_A + psm[i];
		CK_B = CK_B + CK_A;
	  }
	psm[14] = CK_A & 0xFF;
	psm[15] = CK_B & 0xFF;

	uint8_t save_config[] = {0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00,
      		0x00, 0x00, 0x00, 0x07, 0x21, 0xAF};

	for(int i = 0; i < 16; i++){
		USART_SendData(USART2, psm[i]);
	}

	for(int i = 0; i < 21; i++){
		USART_SendData(USART2, save_config[i]);
	}
}
